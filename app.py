import flet as ft
import threading
import re
import os
from datetime import datetime
from main import executar_fluxo_completo

navegador_global = None
historico_logs = []

def main(page: ft.Page):
    global navegador_global, historico_logs

    page.title = "SIOR - Relat√≥rios de AIT"
    page.scroll = "AUTO"
    page.padding = 20
    page.theme_mode = "light"

    def toggle_theme(e):
        page.theme_mode = "dark" if page.theme_mode == "light" else "light"
        toggle_switch.label = "üåô Modo Escuro" if page.theme_mode == "light" else "üåû Modo Claro"
        page.update()

    toggle_switch = ft.Switch(
        label="üåô Modo Escuro",
        value=False,
        on_change=toggle_theme,
        tooltip="Alternar entre tema claro e escuro"
    )

    check_financeiro = ft.Checkbox(label="Relat√≥rio Financeiro", value=True)
    check_resumido = ft.Checkbox(label="Relat√≥rio Resumido")
    input_codigos = ft.TextField(label="C√≥digos AIT (um por linha)", multiline=True, min_lines=5, max_lines=10, expand=True)
    log_console = ft.TextField(label="üìù Log de Execu√ß√£o", multiline=True, disabled=True, expand=True, height=200)
    log_historico_view = ft.TextField(value="", multiline=True, read_only=True, expand=True, height=300)
    progress_bar = ft.ProgressBar(value=0, width=400)
    progress_text = ft.Text("Progresso: 0%", visible=False)
    status_msg = ft.Text(value="", size=14, color="green", visible=False)

    btn_iniciar = ft.ElevatedButton(
        "Iniciar Processo",
        icon=ft.Icons.DOWNLOAD,
        on_click=None,
        bgcolor="blue",
        color="white"
    )

    def run_process(e):
        def resetar_botao():
            btn_iniciar.disabled = False
            btn_iniciar.text = "Iniciar Processo"
            btn_iniciar.icon = ft.Icons.DOWNLOAD
            page.update()

        btn_iniciar.text = "Aguarde..."
        btn_iniciar.icon = ft.Icons.HOURGLASS_EMPTY
        btn_iniciar.disabled = True
        status_msg.visible = False
        page.update()

        codigos = [c.strip() for c in input_codigos.value.splitlines() if c.strip()]
        erros = []

        if not codigos:
            erros.append("‚ö† √â necess√°rio inserir ao menos um c√≥digo AIT.")
        if len(set(codigos)) < len(codigos):
            erros.append("‚ö† Existem c√≥digos duplicados.")
        if len(codigos) > 100:
            erros.append("‚ö† Limite m√°ximo de 100 c√≥digos AIT por vez.")
        if any(" " in codigo for codigo in codigos):
            erros.append("‚ö† Os c√≥digos AIT n√£o podem conter espa√ßos.")
        if any(not re.match(r"^[A-Za-z]{1}[0-9]{9}$", codigo) for codigo in codigos):
            erros.append("‚ö† Todos os c√≥digos devem ter o formato: Letra + 9 d√≠gitos.")
        if not (check_financeiro.value or check_resumido.value):
            erros.append("‚ö† Selecione ao menos um tipo de relat√≥rio.")

        if erros:
            log_console.value = "\n".join(erros)
            resetar_botao()
            return

        progress_bar.value = 0
        progress_text.visible = True
        progress_text.value = "Progresso: 0%"
        page.update()

        def update_progress(atual, total):
            progress_bar.value = atual / total
            progress_text.value = f"Progresso: {int((atual / total) * 100)}%"
            page.update()

        def resetar_botao():
            btn_iniciar.disabled = False
            btn_iniciar.text = "Iniciar Processo"
            btn_iniciar.icon = ft.Icons.DOWNLOAD
            page.update()

        def task():
            global navegador_global
            try:
                log_console.value = ""
                navegador_global = executar_fluxo_completo(
                    "\n".join(codigos),
                    log=log_console,
                    baixar_financeiro=check_financeiro.value,
                    baixar_resumido=check_resumido.value,
                    atualizar_progresso=update_progress,
                    total=len(codigos)
                )
                progress_bar.value = 1
                progress_text.value = "‚úÖ Conclu√≠do"
                historico_logs.append(log_console.value)
                log_historico_view.value = "\n\n".join(historico_logs)
                status_msg.value = "‚úÖ Processo conclu√≠do."
                status_msg.visible = True
            finally:
                resetar_botao()

        threading.Thread(target=task).start()

    btn_iniciar.on_click = run_process

    def exportar_logs(e):
        snackbar = ft.SnackBar(ft.Text("Logs exportados com sucesso!"))
        page.snack_bar = snackbar
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            nome_arquivo = os.path.join(os.path.expanduser("~"), "Downloads", f"Logs_{timestamp}.txt")
            with open(nome_arquivo, "w", encoding="utf-8") as f:
                f.write("\n\n".join(historico_logs) or "Nenhum log dispon√≠vel.")
            page.snack_bar.open = True
            page.update()
        except Exception as ex:
            print(f"‚ùå Erro ao exportar logs: {ex}")

    aba_download = ft.Column([
        ft.Text("üì• DOWNLOAD DE RELAT√ìRIOS", size=18, weight="bold"),
        ft.Text("Insira at√© 100 c√≥digos AIT v√°lidos (ex: B123456789) e selecione os relat√≥rios desejados."),
        ft.Divider(),
        ft.Row([check_financeiro, check_resumido]),
        input_codigos,
        ft.Row([btn_iniciar], alignment="center"),
        status_msg,
        ft.Container(content=ft.Column([progress_bar, progress_text]), alignment=ft.alignment.center),
        log_console
    ])

    aba_logs = ft.Column([
        ft.Text("üßæ LOGS DE EXECU√á√ÉO", size=18, weight="bold"),
        ft.Text("Aqui voc√™ pode revisar e exportar os logs gerados durante os processos executados."),
        ft.Divider(),
        log_historico_view,
        ft.Row([
            ft.ElevatedButton("Exportar Logs", icon=ft.Icons.DOWNLOAD, on_click=exportar_logs)
        ], alignment="center")
    ])

    aba_consulta = ft.Column([
        ft.Text("üîç CONSULTA AIT", size=18, weight="bold"),
        ft.Text("Funcionalidade em desenvolvimento. Em breve ser√° poss√≠vel consultar informa√ß√µes detalhadas dos autos."),
    ])

    aba_sobre = ft.Column([
        ft.Text("‚ÑπÔ∏è SOBRE A APLICA√á√ÉO", size=18, weight="bold"),
        ft.Text("Esta aplica√ß√£o permite baixar relat√≥rios de Autos de Infra√ß√£o de Tr√¢nsito (AIT) diretamente do sistema SIOR."),
        ft.Text("- Insira at√© 100 c√≥digos AIT no formato: 1 LETRA + 9 D√çGITOS (ex: B123456789)."),
        ft.Text("- Os relat√≥rios ser√£o salvos na pasta Downloads."),
        ft.Text("- √â poss√≠vel escolher entre relat√≥rio financeiro, resumido ou ambos."),
        ft.Text("- O navegador abrir√° automaticamente para login se necess√°rio."),
    ])

    page.add(
        ft.Column([
            ft.Row([
                ft.Text("SIOR Relat√≥rios", size=20, weight="bold", expand=True),
                toggle_switch
            ], alignment="spaceBetween"),
            ft.Tabs(
                selected_index=0,
                animation_duration=200,
                tabs=[
                    ft.Tab(text="üì• Download de Relat√≥rios", content=aba_download),
                    ft.Tab(text="üßæ Logs", content=aba_logs),
                    ft.Tab(text="üîç Consulta AIT", content=aba_consulta),
                    ft.Tab(text="‚Ñπ Sobre", content=aba_sobre),
                ],
                expand=1
            )
        ])
    )

ft.app(target=main)
